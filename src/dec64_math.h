/* dec64.h

The dec64_math header file. This is the companion to dec64_math.c.

dec64.com
2018-01-20
Public Domain

No warranty.
*/

#ifndef DEC64_MATH
#define DEC64_MATH

#ifdef __cplusplus
extern "C" {
#endif


#define D_2                           0x200LL
#define D_E              0x6092A113D8D574F0LL
#define D_HALF                        0x5FFLL
#define D_HALF_PI        0x37CE4F32BB21A6F0LL
#define D_NHALF_PI       0xC831B0CD44DE59F0LL
#define D_NPI            0x9063619A89BCB4F0LL
#define D_PI             0x6F9C9E6576434CF0LL
#define D_2PI            0x165286144ADA42F1LL

#define FAC              93

static const dec64 factorials[FAC] = {
        (1LL << 8) + 0,
        (1LL << 8) + 0,
        (2LL << 8) + 0,
        (6LL << 8) + 0,
        (24LL << 8) + 0,
        (120LL << 8) + 0,
        (720LL << 8) + 0,
        (5040LL << 8) + 0,
        (40320LL << 8) + 0,
        (362880LL << 8) + 0,
        (3628800LL << 8) + 0,
        (39916800LL << 8) + 0,
        (479001600LL << 8) + 0,
        (6227020800LL << 8) + 0,
        (87178291200LL << 8) + 0,
        (1307674368000LL << 8) + 0,
        (20922789888000LL << 8) + 0,
        (355687428096000LL << 8) + 0,
        (6402373705728000LL << 8) + 0,
        (12164510040883200LL << 8) + 1,
        (24329020081766400LL << 8) + 2,
        (5109094217170944LL << 8) + 4,
        (11240007277776077LL << 8) + 5,
        (25852016738884977LL << 8) + 6,
        (6204484017332394LL << 8) + 8,
        (15511210043330986LL << 8) + 9,
        (4032914611266056LL << 8) + 11,
        (10888869450418352LL << 8) + 12,
        (30488834461171386LL << 8) + 13,
        (8841761993739702LL << 8) + 15,
        (26525285981219106LL << 8) + 16,
        (8222838654177923LL << 8) + 18,
        (26313083693369353LL << 8) + 19,
        (8683317618811886LL << 8) + 21,
        (29523279903960414LL << 8) + 22,
        (10333147966386145LL << 8) + 24,
        (3719933267899012LL << 8) + 26,
        (13763753091226345LL << 8) + 27,
        (5230226174666011LL << 8) + 29,
        (20397882081197443LL << 8) + 30,
        (8159152832478977LL << 8) + 32,
        (33452526613163807LL << 8) + 33,
        (14050061177528799LL << 8) + 35,
        (6041526306337384LL << 8) + 37,
        (26582715747884488LL << 8) + 38,
        (11962222086548019LL << 8) + 40,
        (5502622159812089LL << 8) + 42,
        (25862324151116818LL << 8) + 43,
        (12413915592536073LL << 8) + 45,
        (6082818640342676LL << 8) + 47,
        (30414093201713378LL << 8) + 48,
        (15511187532873823LL << 8) + 50,
        (8065817517094388LL << 8) + 52,
        (4274883284060026LL << 8) + 54,
        (23084369733924138LL << 8) + 55,
        (12696403353658276LL << 8) + 57,
        (7109985878048635LL << 8) + 59,
        (4052691950487722LL << 8) + 61,
        (23505613312828786LL << 8) + 62,
        (13868311854568984LL << 8) + 64,
        (8320987112741390LL << 8) + 66,
        (5075802138772248LL << 8) + 68,
        (31469973260387938LL << 8) + 69,
        (19826083154044401LL << 8) + 71,
        (12688693218588416LL << 8) + 73,
        (8247650592082471LL << 8) + 75,
        (5443449390774431LL << 8) + 77,
        (3647111091818869LL << 8) + 79,
        (24800355424368306LL << 8) + 80,
        (17112245242814131LL << 8) + 82,
        (11978571669969892LL << 8) + 84,
        (8504785885678623LL << 8) + 86,
        (6123445837688609LL << 8) + 88,
        (4470115461512684LL << 8) + 90,
        (33078854415193864LL << 8) + 91,
        (24809140811395398LL << 8) + 93,
        (18854947016660503LL << 8) + 95,
        (14518309202828587LL << 8) + 97,
        (11324281178206298LL << 8) + 99,
        (8946182130782975LL << 8) + 101,
        (7156945704626380LL << 8) + 103,
        (5797126020747368LL << 8) + 105,
        (4753643337012842LL << 8) + 107,
        (3945523969720659LL << 8) + 109,
        (33142401345653533LL << 8) + 110,
        (28171041143805503LL << 8) + 112,
        (24227095383672732LL << 8) + 114,
        (21077572983795277LL << 8) + 116,
        (18548264225739844LL << 8) + 118,
        (16507955160908461LL << 8) + 120,
        (14857159644817615LL << 8) + 122,
        (1352001527678403LL << 8) + 124,
        (12438414054641307LL << 8) + 126
};

extern dec64 dec64_raise(dec64 coefficient, dec64 exponent);

dec64 dec64_acos(dec64 slope);
dec64 dec64_asin(dec64 slope);
dec64 dec64_atan(dec64 slope);
dec64 dec64_atan2(dec64 y, dec64 x);
dec64 dec64_cos(dec64 radians);
dec64 dec64_exp(dec64 exponent);
dec64 dec64_exponentiate(dec64 coefficient, dec64 exponent);
dec64 dec64_factorial(dec64 x);
dec64 dec64_log(dec64 x);
dec64 dec64_random();
dec64 dec64_root(dec64 index, dec64 radicand) ;
void dec64_seed(dec64 seed);
dec64 dec64_sin(dec64 radians);
dec64 dec64_sqrt(dec64 radicand);
dec64 dec64_tan(dec64 radians);

#ifdef __cplusplus
}
#endif

#endif //DEC64_MATH
